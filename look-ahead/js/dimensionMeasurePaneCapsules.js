let DimensionMeasurePaneCapsules = {
	installDragBehaviour: function() {
		const self = this;
		let dragBehaviour = d3.drag()
	        .on("drag", self.onDragging)
	        .on("end", self.onDragEnd);

	    d3.selectAll('#dimension-pane .content .capsule')
	    	.call(dragBehaviour);
	    d3.selectAll('#measure-pane .content .capsule')
	    	.call(dragBehaviour);
	},
	installTooltips: function() {
		const self = this;

		self.installAttributeNameTooltip();
		self.installSettingButtonTooltip();
		self.installPlusButtonTooltip();
		self.installRemoveButtonTooltip();
	},
	installClickButtonsBehaviour: function() {
		const self = this;

		// capsule and setting button handled in clickEventListeners
		self.installClickPlusButtonBehaviour();
		self.installClickRemoveButtonBehaviour();
	},

	// selection handling

	hasSelection: function() {
		return $('#dimension-pane .content .capsule.clicked, #measure-pane .content .capsule.clicked').length !== 0;
	},
	getSelectedCapsuleData: function() {
		let selectedCapsuleData = [];

		$('#dimension-pane .content .capsule.clicked, #measure-pane .content .capsule.clicked').each(function() {
			let capsuleContainerEl = $(this).closest('.container')[0];
			let capsuleData = d3.select(capsuleContainerEl).datum();

			selectedCapsuleData.push(capsuleData);
		});

		return selectedCapsuleData;
	},
	clearAllSelection: function() {
		$('#dimension-pane .content .capsule').removeClass('clicked');
		$('#measure-pane .content .capsule').removeClass('clicked');
	},

	// mouseenter

	installAttributeNameTooltip: function() {
		$('#dimension-pane .content .capsule .attribute-name')
			.on('mouseenter', onMouseEnterAttributeName)
			.on('mouseleave', onMouseLeaveAttributeName);
		$('#measure-pane .content .capsule .attribute-name')
			.on('mouseenter', onMouseEnterAttributeName)
			.on('mouseleave', onMouseLeaveAttributeName);

		function onMouseEnterAttributeName() {
			let isAttributeNameOverflow = Helpers.isXOverflow(this);
			let tooltipText = $(this).html();

			if (isAttributeNameOverflow)
				Tooltip.show(this, 26, -9, tooltipText);
		}

		function onMouseLeaveAttributeName() {
			Tooltip.remove();
		}
	},
	installSettingButtonTooltip: function() {
		$('#dimension-pane .content .capsule .fa-cog')
			.on('mouseenter', onMouseEnterSettingButton)
			.on('mouseleave', onMouseLeaveSettingButton);
		$('#measure-pane .content .capsule .fa-cog')
			.on('mouseenter', onMouseEnterSettingButton)
			.on('mouseleave', onMouseLeaveSettingButton);

		function onMouseEnterSettingButton() {
			let isCapsuleUserAdded = $(this).closest('.capsule').hasClass('added-by-user');

			if (isCapsuleUserAdded)
				Tooltip.show(this, 26, -9);
			if (!isCapsuleUserAdded)
				Tooltip.show(this, 9, -9);
		}

		function onMouseLeaveSettingButton() {
			Tooltip.remove();
		}
	},
	installPlusButtonTooltip: function() {
		$('#dimension-pane .content .capsule .fa-plus')
			.on('mouseenter', onMouseEnterAddButton)
			.on('mouseleave', onMouseLeaveAddButton);
		$('#measure-pane .content .capsule .fa-plus')
			.on('mouseenter', onMouseEnterAddButton)
			.on('mouseleave', onMouseLeaveAddButton);

		function onMouseEnterAddButton() {
			let isCapsuleUserAdded = $(this).closest('.capsule').hasClass('added-by-user');

			if (isCapsuleUserAdded)
				Tooltip.show(this, 9, -9);
			if (!isCapsuleUserAdded)
				Tooltip.show(this, -8, -9);
		}

		function onMouseLeaveAddButton() {
			Tooltip.remove();
		}
	},
	installRemoveButtonTooltip: function() {
		$('#dimension-pane .content .capsule .fa-times')
			.on('mouseenter', onMouseEnterRemoveButton)
			.on('mouseleave', onMouseLeaveRemoveButton);
		$('#measure-pane .content .capsule .fa-times')
			.on('mouseenter', onMouseEnterRemoveButton)
			.on('mouseleave', onMouseLeaveRemoveButton);

		function onMouseEnterRemoveButton() { Tooltip.show(this, -8, -9); } // must be the right most button
		function onMouseLeaveRemoveButton() { Tooltip.remove(); }
	},

	// click behaviours

	installClickPlusButtonBehaviour: function() {
		$('#dimension-pane .content .capsule .fa-plus')
			.on('click', onClickAddButton);
		$('#measure-pane .content .capsule .fa-plus')
			.on('click', onClickAddButton);

		function onClickAddButton() {
			let capsuleContainerEl = $(this).closest('.container')[0];
			let capsuleData = d3.select(capsuleContainerEl).datum();
			let copiedCapsuleData = $.extend(true, {}, capsuleData); 

			let attributeName = capsuleData.attributeName;
			let attributeType = capsuleData.type;
			let attributeAggregateOrTimeUnit = (capsuleData.aggregate != 'none') ? capsuleData.aggregate : ((capsuleData.timeUnit != 'none') ? capsuleData.timeUnit : '');
			let needParenthesis = (attributeAggregateOrTimeUnit === '') ? false : true;
			let isAttrAutoGenerated = capsuleData.isAutoGenerated;
			let isAttrOriginallyNominal = (Database.attributeMetadata[attributeName].type == 'nominal');
			let shelfToOccupy = determineWhichShelfToAdd(capsuleData);

			if (shelfToOccupy !== null) {
				// visually add capsule to shelf
				Shelf[shelfToOccupy].createCapsule(isAttrAutoGenerated, isAttrOriginallyNominal);
				Shelf[shelfToOccupy].installCapsuleTooltip();
				Shelf[shelfToOccupy].installRemoveButtonBehaviour();
				Shelf[shelfToOccupy].installDragCapsuleBehaviour(); // setting button handled in Listener class
				Shelf[shelfToOccupy].pauseTooltipFor(500);
				Shelf[shelfToOccupy].changeCapsuleAttributeType(attributeType);
				Shelf[shelfToOccupy].changeCapsuleAttributeName(attributeName, needParenthesis);
				Shelf[shelfToOccupy].changeAggregateOrTimeUnit(attributeAggregateOrTimeUnit);
				Shelf[shelfToOccupy].adjustAttributeNameWidth();

				// update data
				copiedCapsuleData.capsuleLocation = 'shelf';
				Shelf[shelfToOccupy].storeCapsuleData(copiedCapsuleData);

				// draw chart using vega-lite
				ShowMe.tryUnlockDensityPlot();
				ShowMe.tryUnlockTrendLines();
				VisualizationPane.showLoader();
				VisualizationPane.allowUpdating();
				VegaliteGenerator.generateSpecification(); // may block vis update
				VisualizationPane.tryUpdating();

				// look ahead
				LookAheadEventHandler.listenEvent();
			}

			if (shelfToOccupy === null)
				Tooltip.refresh('Failed to add to chart automatically');
		}

		function determineWhichShelfToAdd(capsuleData) {
			let capsuleAttributeName = capsuleData.attributeName;
			let capsuleAttributeType = capsuleData.type;
			let isCapsuleAttrAutoGenerated = capsuleData.isAutoGenerated;
			let isNumberOfRecords = (capsuleAttributeName == 'Number of Records' && isCapsuleAttrAutoGenerated);

			let addingAttributeType = isCapsuleAttrAutoGenerated ? 'count' : capsuleAttributeType;
			let shelfToOccupy = null;
			let addSequence = {
				'nominal': [ 'xAxis', 'yAxis', 'colour', 'column' ],
				'ordinal': [ 'xAxis', 'yAxis', 'colour', 'column' ],
				'quantitative': [ 'xAxis', 'yAxis', 'size', 'column' ],
				'temporal': [ 'xAxis', 'yAxis', 'size', 'column' ],
				'count': [ 'xAxis', 'yAxis', 'size' ]
			}

			for (let i = 0; i < addSequence[addingAttributeType].length; i++) {
				let currentShelfName = addSequence[addingAttributeType][i];
				let isCurrentShelfEmpty = Shelf[currentShelfName].isEmpty();

				if (isCurrentShelfEmpty) {
					shelfToOccupy = currentShelfName;
					break;
				}
			}

			return shelfToOccupy;
		}
	},
	installClickRemoveButtonBehaviour: function() {
		$('#dimension-pane .content .capsule .fa-times')
			.on('click', onClickRemoveButton);
		$('#measure-pane .content .capsule .fa-times')
			.on('click', onClickRemoveButton);

		function onClickRemoveButton() {
			let capsuleContainerEl = $(this).closest('.container')[0];
			let capsuleData = d3.select(capsuleContainerEl).datum();

			DimensionMeasurePane.removeDimensionsOrMeasures(capsuleData);
			DimensionMeasurePane.renderDimensionCapsules();
			DimensionMeasurePane.renderMeasureCapsules();
			DimensionMeasurePane.adjustHeight();
			DimensionMeasurePane.adjustAttributeNameWidth();

			DimensionMeasurePaneCapsules.installTooltips();
			DimensionMeasurePaneCapsules.installDragBehaviour();
			DimensionMeasurePaneCapsules.installClickButtonsBehaviour();

			Tooltip.remove();
		}
	},

	// drag behaviours

	onDragging: function() {
		// start dragging
		if (!DraggableCapsule.isCreated()) {
			let capsuleContainerEl = $(this).closest('.container')[0];
			let capsuleData = d3.select(capsuleContainerEl).datum();
			let attributeName = capsuleData.attributeName;
			let attributeType = capsuleData.type;
			let attributeAggregateOrTimeUnit = (capsuleData.aggregate != 'none') ? capsuleData.aggregate : ((capsuleData.timeUnit != 'none') ? capsuleData.timeUnit : '');
			let needParenthesis = (attributeAggregateOrTimeUnit === '') ? false : true;
			let isAttrAutoGenerated = capsuleData.isAutoGenerated;
			let isAttrOriginallyNominal = (Database.attributeMetadata[attributeName].type == 'nominal');

			let draggedCapsulePos =  $(this).offset();
			let draggedCapsuleWidth = $(this).width() + 5; // 5 is padding

			// create draggable capsule
			DraggableCapsule.remove();
			DraggableCapsule.create(isAttrAutoGenerated, isAttrOriginallyNominal);
			DraggableCapsule.changeWidth(draggedCapsuleWidth);
			DraggableCapsule.changeAttributeType(attributeType);
			DraggableCapsule.changeAttributeName(attributeName, needParenthesis);
			DraggableCapsule.changeAggregateOrTimeUnit(attributeAggregateOrTimeUnit);
			DraggableCapsule.adjustAttributeNameWidth();

			// shelf highlight
			Shelves.highlight();
			FilterShelf.highlight();
			Shelves.checkPosition();
			FilterShelf.checkPosition();

			// others
			PreviewMode.confirm();
			DimensionMeasurePaneCapsules.clearAllSelection();
			ShowMe.tryUnlockDensityPlot();
			ShowMe.tryUnlockTrendLines();
			VariableSettingMenu.hide();
			LookAheadSelectMetricMenu.hide();
			Tooltip.remove();
		}

		// dragging
		if (DraggableCapsule.isCreated()) {
			let mouseX = d3.event.sourceEvent.pageX;
			let mouseY = d3.event.sourceEvent.pageY;
			let hoveredShelfName = Shelves.onWhich(mouseX, mouseY);
			let isOnFilterShelf = FilterShelf.isMouseOnTop(mouseX, mouseY);
			
			FilterShelf.highlight(); // restore highlight
			Shelves.highlight(); // restore highlight
			if (isOnFilterShelf) FilterShelf.doubleHighlight();
			if (hoveredShelfName) Shelf[hoveredShelfName].doubleHighlight();
			DraggableCapsule.moveTo(top = mouseY - 8, left = mouseX - 8);
		}
	},
	onDragEnd: function() {
		if (DraggableCapsule.isCreated()) {
			let mouseX = d3.event.sourceEvent.pageX;
			let mouseY = d3.event.sourceEvent.pageY;
			let hoveredShelfName = Shelves.onWhich(mouseX, mouseY);
			let isOnFilterShelf = FilterShelf.isMouseOnTop(mouseX, mouseY);

			let capsuleContainerEl = $(this).closest('.container')[0];
			let capsuleData = d3.select(capsuleContainerEl).datum();
			let copiedCapsuleData = $.extend(true, {}, capsuleData);
			let previousCapsuleData = hoveredShelfName ? Shelf[hoveredShelfName].getCapsuleData() : null;

			let attributeName = capsuleData.attributeName;
			let attributeType = capsuleData.type;
			let attributeAggregateOrTimeUnit = (capsuleData.aggregate != 'none') ? capsuleData.aggregate : ((capsuleData.timeUnit != 'none') ? capsuleData.timeUnit : '');
			let needParenthesis = (attributeAggregateOrTimeUnit === '') ? false : true;
			let isAttrAutoGenerated = capsuleData.isAutoGenerated;
			let isAttrOriginallyNominal = (Database.attributeMetadata[attributeName].type == 'nominal');

			if (isOnFilterShelf) {
				// remove highlight
				DraggableCapsule.remove();
				Shelves.removeHighlight();
				FilterShelf.removeHighlight();

				// add capsule
				FilterShelf.createFilter(attributeName, attributeType, isAttrAutoGenerated);

				// look ahead
				LookAheadEventHandler.listenEvent();
			}

			if (hoveredShelfName) {
				// remove highlight
				DraggableCapsule.remove();
				Shelves.removeHighlight();
				FilterShelf.removeHighlight();

				// visually add capsule to shelf
				Shelf[hoveredShelfName].createCapsule(isAttrAutoGenerated, isAttrOriginallyNominal);
				Shelf[hoveredShelfName].installCapsuleTooltip();
				Shelf[hoveredShelfName].installRemoveButtonBehaviour();
				Shelf[hoveredShelfName].installDragCapsuleBehaviour(); // setting button handled in Listener class
				Shelf[hoveredShelfName].pauseTooltipFor(500);
				Shelf[hoveredShelfName].changeCapsuleAttributeType(attributeType);
				Shelf[hoveredShelfName].changeCapsuleAttributeName(attributeName, needParenthesis);
				Shelf[hoveredShelfName].changeAggregateOrTimeUnit(attributeAggregateOrTimeUnit);
				Shelf[hoveredShelfName].adjustAttributeNameWidth();

				// update data and prepare for restore shelf state
				copiedCapsuleData.capsuleLocation = 'shelf';
				Shelves.saveState();
				Shelf[hoveredShelfName].storeCapsuleData(copiedCapsuleData);

				// draw chart using vega-lite
				ShowMe.tryUnlockDensityPlot();
				ShowMe.tryUnlockTrendLines();
				VisualizationPane.showLoader();
				VisualizationPane.allowUpdating();
				VegaliteGenerator.generateSpecification(); // may block vis update
				VisualizationPane.tryUpdating();

				// look ahead
				LookAheadEventHandler.listenEvent();
			}

			if (!hoveredShelfName && !isOnFilterShelf) {
				// remove highlight
				DraggableCapsule.remove();
				Shelves.removeHighlight();
				FilterShelf.removeHighlight();

				// look ahead
				LookAheadEventHandler.listenEvent();
			}
		}
	}
}