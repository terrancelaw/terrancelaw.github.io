let DimensionMeasurePane = {
	dimensions: [],
	measures: [],

	copyAttributesFromDatabase: function() {
		const self = this;
		let dimensions = [];
		let measures = [];

		for (let currentAttributeName in Database.attributeMetadata) {
			let currentCapsuleData = Database.attributeMetadata[currentAttributeName];
			let currentAttributeType = currentCapsuleData.type;
			let currentAttributeIsAutoGenerated = currentCapsuleData.isAutoGenerated;
			let copiedCapsuleData = $.extend(true, {}, currentCapsuleData);

			if (currentAttributeType == 'temporal' && currentAttributeIsAutoGenerated)
				continue;

			if (currentAttributeType == 'nominal' ||
				currentAttributeType == 'ordinal' ||
				currentAttributeType == 'temporal') {
				copiedCapsuleData.attributeName = currentAttributeName;
				copiedCapsuleData.isAddedByUser = false;
				copiedCapsuleData.capsuleLocation = 'dimensionPane';
				dimensions.push(copiedCapsuleData);
			}
			
			if (currentAttributeType == 'quantitative') {
				copiedCapsuleData.attributeName = currentAttributeName;
				copiedCapsuleData.isAddedByUser = false;
				copiedCapsuleData.capsuleLocation = 'measurePane';
				measures.push(copiedCapsuleData);
			}
		}

		self.dimensions = dimensions;
		self.measures = measures;
	},
	refreshAttributes: function() { // some dimensions may become measures and vice versa
		const self = this;
		let allAttributes = self.dimensions.concat(self.measures);
		let dimensions = [];
		let measures = [];

		for (let i = 0; i < allAttributes.length; i++) {
			let currentCapsuleData = allAttributes[i];
			let currentAttributeType = currentCapsuleData.type;

			if (currentAttributeType == 'nominal' ||
				currentAttributeType == 'ordinal' ||
				currentAttributeType == 'temporal')
				dimensions.push(currentCapsuleData);
			
			if (currentAttributeType == 'quantitative')
				measures.push(currentCapsuleData);
		}

		self.dimensions = dimensions;
		self.measures = measures;
	},
	renderDimensionCapsules: function() {
		const self = this;

		let capsuleUpdate = d3.select('#dimension-pane .content').selectAll('.container')
			.data(self.dimensions);

		let capsuleEnter = capsuleUpdate.enter()
			.append('div')
			.attr('class', 'container');

		capsuleUpdate.merge(capsuleEnter).each(function(d) {
			let currentAttributeName = d.attributeName;
			let currentAttributeType = d.type;
			let currentAttributeTimeUnit = (d.timeUnit != 'none') ? d.timeUnit : '';
			let isCurrentAttrAddedByUser = d.isAddedByUser;
			let isCurrentAttrOriginallyNominal = (Database.attributeMetadata[currentAttributeName].type == 'nominal');
			let capsuleClassName = 'capsule';

			let aggregateOrTimeUnitDivHTML = '<span class="aggregate-or-time-unit">' + currentAttributeTimeUnit + '</span>';
			let settingButtonHTML = '<span class="fa fa-cog" data-tooltip="Change variable type and function"></span>';
			let addButtonHTML = '<span class="fa fa-plus" data-tooltip="Add variable to chart"></span>';
			let removeButtonHTML = isCurrentAttrAddedByUser ? '<span class="fa fa-times" data-tooltip="Remove from list"></span>' : '';
			let attributeNameDivHTML = (currentAttributeTimeUnit == '') 
									 ? ('<span class="attribute-name">' + currentAttributeName + '</span>')
									 : ('<span class="attribute-name"><span class="parenthesis">(</span>' + currentAttributeName + '<span class="parenthesis">)</span></span>');

			// determine capsule class name
			if (isCurrentAttrAddedByUser)
				capsuleClassName += ' added-by-user';
			if (isCurrentAttrOriginallyNominal)
				capsuleClassName += ' originally-nominal';

			// append HTML
			if (currentAttributeType == 'ordinal' || currentAttributeType == 'nominal')
				$(this).html('<span class="fa fa-font"></span>' +
							 '<div class="' + capsuleClassName + '">' +
							 	aggregateOrTimeUnitDivHTML + attributeNameDivHTML + settingButtonHTML + addButtonHTML + removeButtonHTML +
							 '</div>');
			if (currentAttributeType == 'temporal')
				$(this).html('<span class="fa fa-calendar-alt"></span>' +
							 '<div class="' + capsuleClassName + '">' +
							 	aggregateOrTimeUnitDivHTML + attributeNameDivHTML + settingButtonHTML + addButtonHTML + removeButtonHTML +
							 '</div>');
		});

		let capsuleExit = capsuleUpdate.exit()
			.remove();
	},
	renderMeasureCapsules: function() {
		const self = this;

		let capsuleUpdate = d3.select('#measure-pane .content').selectAll('.container')
			.data(self.measures);

		let capsuleEnter = capsuleUpdate.enter()
			.append('div')
			.attr('class', 'container');

		capsuleUpdate.merge(capsuleEnter).each(function(d) {
			let currentAttributeName = d.attributeName;
			let currentAttributeType = d.type;
			let currentAttributeAggregate = (d.aggregate != 'none') ? d.aggregate : '';
			let isCurrentAttrAutoGenerated = d.isAutoGenerated;
			let isCurrentAttrAddedByUser = d.isAddedByUser;
			let isCurrentAttrOriginallyNominal = (Database.attributeMetadata[currentAttributeName].type == 'nominal');
			let capsuleClassName = 'capsule';

			let aggregateOrTimeUnitDivHTML = '<span class="aggregate-or-time-unit">' + currentAttributeAggregate + '</span>';
			let settingButtonHTML = '<span class="fa fa-cog" data-tooltip="Change variable type and function"></span>';
			let addButtonHTML = '<span class="fa fa-plus" data-tooltip="Add variable to chart"></span>';
			let removeButtonHTML = isCurrentAttrAddedByUser ? '<span class="fa fa-times" data-tooltip="Remove from list"></span>' : '';
			let attributeNameDivHTML = (currentAttributeAggregate == '') 
									 ? ('<span class="attribute-name">' + currentAttributeName + '</span>')
									 : ('<span class="attribute-name"><span class="parenthesis">(</span>' + currentAttributeName + '<span class="parenthesis">)</span></span>');

			// determine capsule class name
			if (isCurrentAttrAutoGenerated)
				capsuleClassName += ' auto-generated';
			if (isCurrentAttrAddedByUser)
				capsuleClassName += ' added-by-user';
			if (isCurrentAttrOriginallyNominal)
				capsuleClassName += ' originally-nominal';

			// append HTML
			$(this).html('<span class="fa fa-hashtag"></span>' +
						 '<div class="' + capsuleClassName + '">' +
						 	aggregateOrTimeUnitDivHTML + attributeNameDivHTML + settingButtonHTML + addButtonHTML + removeButtonHTML +
						 '</div>');
		});

		let capsuleExit = capsuleUpdate.exit()
			.remove();
	},
	adjustHeight: function() {
		const self = this;

		self.adjustDimensionPaneMaxHeight();
		self.adjustMeasurePaneHeight();
	},
	adjustDimensionPaneMaxHeight: function() {
		let dataColumnHeight = $('#data-column').height();
		let dimensionPaneContentEl = $('#dimension-pane .content')[0];
		let dimensionPaneContentMaxHeight = (dataColumnHeight - 65 - 7) / 2 - 25 - 5;
		let isDimensionPaneContentOverflow = (dimensionPaneContentMaxHeight < dimensionPaneContentEl.scrollHeight);
		let dimensionPaneMaxHeight = (dataColumnHeight - 65 - 7) / 2;

		if (isDimensionPaneContentOverflow)
			$('#dimension-pane').css('height', dimensionPaneMaxHeight);
		if (!isDimensionPaneContentOverflow)
			$('#dimension-pane').css('height', '');
	},
	adjustMeasurePaneHeight: function() {
		let dataColumnHeight = $('#data-column').height();
		let dimensionPaneHeight = $('#dimension-pane').height();
		let measurePaneHeight = dataColumnHeight - 65 - 7 - dimensionPaneHeight; // remaining

		$('#measure-pane')
			.css('height', measurePaneHeight);
	},
	adjustAttributeNameWidth: function() {
		let attributeNameLength = { short: 115, middle: 130, long: 145 };

		$('#dimension-pane .capsule, #measure-pane .capsule').each(function() {
			let aggregateOrTimeUnitWidth = $(this).find('.aggregate-or-time-unit').width();
			let hasSettingButton = !$(this).hasClass('auto-generated') && !$(this).hasClass('originally-nominal');
			let hasAddButton = true;
			let hasRemoveButton = $(this).hasClass('added-by-user');

			if (hasSettingButton && hasAddButton && hasRemoveButton)
				$(this).find('.attribute-name')
					.css('width', attributeNameLength.short - aggregateOrTimeUnitWidth);

			if (hasSettingButton && hasAddButton && !hasRemoveButton)
				$(this).find('.attribute-name')
					.css('width', attributeNameLength.middle - aggregateOrTimeUnitWidth);

			if (!hasSettingButton && hasAddButton && !hasRemoveButton)
				$(this).find('.attribute-name')
					.css('width', attributeNameLength.long - aggregateOrTimeUnitWidth);
		});
	},
	removeDimensionsOrMeasures: function(attributeObject) {
		const self = this;

		for (let i = 0; i < self.dimensions.length; i++)
			if (attributeObject === self.dimensions[i]) {
				self.dimensions.splice(i, 1);
				return;;
			}

		for (let i = 0; i < self.measures.length; i++)
			if (attributeObject === self.measures[i]) {
				self.measures.splice(i, 1);
				return;;
			}
	}
}